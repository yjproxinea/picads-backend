[tool.poetry]
name = "picads-backend"
version = "1.0.0"
description = "Backend API for Picads - AI-powered ad generation platform"
authors = ["Picads Team <team@picads.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11.4"
# Core FastAPI and server dependencies
fastapi = "0.104.1"
fastapi-cli = "0.0.7"
uvicorn = {extras = ["standard"], version = "0.24.0"}
gunicorn = "^21.2.0"
starlette = "0.27.0"
# Data validation and settings
pydantic = "2.5.0"
pydantic-core = "2.14.1"
pydantic-settings = "2.1.0"
# Environment and configuration
python-dotenv = "1.1.0"
# Database dependencies
sqlalchemy = "2.0.41"
asyncpg = "0.29.0"
# HTTP clients and networking
aiohttp = "3.12.6"
aiohappyeyeballs = "2.6.1"
aiosignal = "1.3.2"
httpx = "^0.26.0"
httpcore = "^1.0.9"
anyio = "3.7.1"
sniffio = "1.3.1"
requests = "2.32.3"
urllib3 = "2.4.0"
charset-normalizer = "3.4.2"
idna = "3.10"
certifi = "2025.4.26"
# WebSockets
websockets = "12.0"
# Authentication and security
python-jose = {extras = ["cryptography"], version = "3.5.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
pyjwt = "2.10.1"
cryptography = "45.0.3"
# Form handling
python-multipart = "0.0.20"
# Email validation
email-validator = "^2.2.0"
# External services
supabase = "^2.15.2"
gotrue = "^2.12.0"
postgrest = "^1.0.2"
realtime = "^2.4.3"
storage3 = "^0.11.3"
supafunc = "^0.9.4"
stripe = "12.2.0"
# Date utilities
python-dateutil = "2.9.0.post0"
# Async utilities
frozenlist = "1.6.0"
multidict = "6.4.4"
propcache = "0.3.1"
yarl = "1.20.0"
# Other utilities
strenum = "0.4.15"
deprecation = "2.1.0"
attrs = "25.3.0"
# CLI and terminal
typer = "0.16.0"
rich = "14.0.0"
click = "8.2.1"
shellingham = "1.5.4"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "8.4.0"
pytest-asyncio = "^0.21.1"
pytest-mock = "3.14.1"
pytest-cov = "^4.1.0"
# Code formatting and linting
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poetry scripts removed - use direct commands instead
# Use: poetry run <command> directly

# Code formatting configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 